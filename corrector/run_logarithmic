from argparse import ArgumentParser
from time import time
import numpy as np
import matplotlib.pyplot as plt

from corrector.Lattice import Lattice, nx_template, win_or_lose

def run(A, shear, threshold, NX, H, V):
    A.apply_error(threshold)
    BA = A.correct(NX)
    result = win_or_lose(BA, H, V)
    return result

def repeat(A, shear, threshold, reps, NX, H, V):
    results = []
    for rep in range(reps):
        result = run(A, shear, threshold, NX, H, V)
        results.append(result)
    return results.count(False)/reps

def process():
    parser = ArgumentParser(description="Plot a graph showing probability of successful correction for different lattice dimensions and error thresholds.")
    """parser.add_argument('d_range', type=list,
                        help="Input range of dimensions of qubit lattice you wish to plot.")"""
    """parser.add_argument('shear', type=int,
                        help="Input shear of qubit lattice.")"""
    """parser.add_argument('t_range', type=list,
                        help="Input thresholds (probability of error per qubit) you wish to plot. Format: [start, end, step]")"""
    parser.add_argument('reps', type=int,
                        help="Number of repetitions for set d, shear and threshold parameters.")
    args = parser.parse_args()
    
    t0=time()
    
    """DEFAULT PARAMETERS for d_range, t_range and shear"""
    d_range=[5, 6, 7, 8, 9, 10]
    p_range=list(np.arange(0.04, 0.08, 0.005))
    shear=0
    
    systems = {}
    for d in d_range:
        lattice = {}
        A = Lattice(d, shear)
        lattice['l'] = A
        NX = nx_template(d, shear) # create nx graph template only once
        lattice['temp'] = NX
        H, V = A.logical_operators() # create set of logical operators only once
        lattice['H'] = H
        lattice['V'] = V
        systems[d] = lattice
        
    """Here we are going to set up all the things that only need to be done *once* for each (d, shear, threshold)"""
    results = {}
    for p in p_range:
        z = []
        for d in d_range:
            A = systems[d]['l']
            NX = systems[d]['temp']
            H = systems[d]['H']
            V = systems[d]['V']
            p_fail = repeat(A, shear, p, args.reps, NX, H, V)
            z.append(p_fail)
        results[p] = z
        print(p, results)
    print(results)

if __name__ == "__main__":
    process()